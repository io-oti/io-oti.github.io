import{_ as s,c as n,o as e,ak as l}from"./chunks/framework.C836Duf6.js";const h=JSON.parse('{"title":"盒子模型（Box Model）","description":"","frontmatter":{"author":"Io_oTI","date":"2023-10-26T00:00:00.000Z","publish":false,"tag":"css","title":"盒子模型（Box Model）"},"headers":[],"relativePath":"posts/web/css/box-model.md","filePath":"posts/web/css/box-model.md","lastUpdated":1742979040000}'),p={name:"posts/web/css/box-model.md"};function t(o,a,i,c,d,r){return e(),n("div",null,[...a[0]||(a[0]=[l(`<p>在 CSS 中，所有的元素都被一个个的“盒子”包围着，理解这些“盒子”的基本原理，是我们使用 CSS 实现准确布局、处理元素排列的关键。</p><p>一般分为区块盒子（block boxes）和行内盒子（inline boxes）,可以使用 <code>display</code> 属性为显示类型设置各种值，该属性可以有多种值。</p><p>以下是盒子模型内容的大概示意，包括外边距盒子（margin box）、边框盒子（border box）、内边距盒子（padding box）和内容盒子（content box）：</p><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes catppuccin-latte catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span>╭┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╮</span></span>
<span class="line"><span>┊        Margin box         ┊</span></span>
<span class="line"><span>┊  ┏━━━━ Border box ━━━━━┓  ┊</span></span>
<span class="line"><span>┊  ┃     Padding box     ┃  ┊</span></span>
<span class="line"><span>┊  ┃  ╭┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╮  ┃  ┊</span></span>
<span class="line"><span>┊  ┃  ┊               ┊  ┃  ┊</span></span>
<span class="line"><span>┊  ┃  ┊  Content box  ┊  ┃  ┊</span></span>
<span class="line"><span>┊  ┃  ┊               ┊  ┃  ┊</span></span>
<span class="line"><span>┊  ┃  ╰┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╯  ┃  ┊</span></span>
<span class="line"><span>┊  ┗━━━━━━━━━━━━━━━━━━━━━┛  ┊</span></span>
<span class="line"><span>╰┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╯</span></span></code></pre></div><h2 id="外部显示类型" tabindex="-1">外部显示类型 <a class="header-anchor" href="#外部显示类型" aria-label="Permalink to &quot;外部显示类型&quot;">​</a></h2><p>一个拥有 block 外部显示类型的盒子会表现出以下行为：</p><ul><li>盒子会产生换行。</li><li>width 和 height 属性可以发挥作用。</li><li>内边距、外边距和边框会将其他元素从当前盒子周围“推开”。</li><li>如果未指定 width，方框将沿行向扩展，以填充其容器中的可用空间。在大多数情况下，盒子会变得与其容器一样宽，占据可用空间的 100%。</li></ul><p>某些 HTML 元素，如 <code>&lt;h1&gt;</code> 和 <code>&lt;p&gt;</code>，默认使用 block 作为外部显示类型。</p><p>一个拥有 inline 外部显示类型的盒子会表现出以下行为：</p><ul><li>盒子不会产生换行。</li><li>width 和 height 属性将不起作用。</li><li>垂直方向的内边距、外边距以及边框会被应用但是不会把其他处于 inline 状态的盒子推开。</li><li>水平方向的内边距、外边距以及边框会被应用且会把其他处于 inline 状态的盒子推开。</li></ul><p>某些 HTML 元素，如 <code>&lt;a&gt;</code>、 <code>&lt;span&gt;</code>、 <code>&lt;em&gt;</code> 以及 <code>&lt;strong&gt;</code>，默认使用 inline 作为外部显示类型。</p><h2 id="内部显示类型" tabindex="-1">内部显示类型 <a class="header-anchor" href="#内部显示类型" aria-label="Permalink to &quot;内部显示类型&quot;">​</a></h2>`,12)])])}const x=s(p,[["render",t]]);export{h as __pageData,x as default};
